# -*- coding: utf-8 -*-
"""M200722CA_SOURAV_KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hM0Q-iFIG-fYfc1NefGoq3WH7vBo2hfj
"""

# Commented out IPython magic to ensure Python compatibility.
#knn classifier
# as is work as alise
#scikit learn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
from sklearn import preprocessing
from sklearn.model_selection import train_test_split

import seaborn as sns
import sklearn.datasets as datasets
# %matplotlib inline

# Commented out IPython magic to ensure Python compatibility.
import matplotlib
# %matplotlib inline
from google.colab import files
uploaded = files.upload()

data = pd.read_csv('iris.data')

data.head()

data.tail()

data.shape

data['classlabel\t'].value_counts()

data.columns

data.values

data.info()

data.describe(include='all')

X = data.iloc[:,0:4]   
X.head()

y = data.iloc[:,-1]     
y.head()

X = preprocessing.StandardScaler().fit_transform(X)
X[0:4]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)
y_test.shape

knnmodel=KNeighborsClassifier(n_neighbors=3)
knnmodel.fit(X_train,y_train)
y_predict1 = knnmodel.predict(X_test)

from sklearn.metrics import accuracy_score

acc = accuracy_score(y_test, y_predict1)
acc

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test.values,y_predict1)
cm

cm1 = pd.DataFrame(data=cm,index=['setosa','versicolor','virginica'],columns=['setosa','versicolor','virginica'])
cm1

prediction_output=pd.DataFrame(data=[y_test.values,y_predict1],index=['y_test','y_predict1'])

prediction_output

prediction_output.transpose()

prediction_output.iloc[0,:].value_counts()

Ks=21
mean_acc=np.zeros((Ks-1))

#train and predict
for n in range(1, Ks):
  neigh=KNeighborsClassifier(n_neighbors=n).fit(X_train,y_train)
  yhat=neigh.predict(X_test)
  mean_acc[n-1]=accuracy_score(y_test,yhat)

print(mean_acc)

print("Best Acccuracy was with" , mean_acc.max(), "with k=",  mean_acc.argmax()+1)

plt.plot(range(1,Ks),mean_acc,'b')
plt.legend(('Accuracy '))
plt.ylabel('Accuracy ')
plt.xlabel('Number of Neighbors (K)')
plt.tight_layout()
plt.show()