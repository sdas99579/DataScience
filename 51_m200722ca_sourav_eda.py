# -*- coding: utf-8 -*-
"""51_M200722CA_SOURAV_EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VZyYXhMLSd84UYnkRyk33s1NOszKPgNx
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import seaborn as sns
import numpy as np
from matplotlib import pyplot as plt
import matplotlib
# %matplotlib inline
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name = fn,length = len(uploaded[fn])))

uploaded

dataset = pd.read_csv('train.csv')

dataset.head()

dataset.shape

dataset.info()

dataset.describe()

pd.crosstab(dataset['Credit_History'], dataset['Loan_Status'], margins=True)

# visualisation

dataset.boxplot(column='ApplicantIncome')

dataset['ApplicantIncome'].hist(bins=20)

dataset['CoapplicantIncome'].hist(bins=20)

dataset.boxplot(column='ApplicantIncome', by='Education')

dataset.boxplot(column='LoanAmount')

dataset['LoanAmount'].hist(bins=20)

#Normalising

dataset['LoanAmount_log']=np.log(dataset['LoanAmount'])
dataset['LoanAmount_log'].hist(bins=20)

#find_missing_values

dataset.isnull().sum()

#handle this missing values by filling up

#catagorical variable

dataset['Gender'].fillna(dataset['Gender'].mode()[0],inplace=True)

dataset['Married'].fillna(dataset['Married'].mode()[0],inplace=True)

dataset['Dependents'].fillna(dataset['Dependents'].mode()[0],inplace=True)

dataset['Self_Employed'].fillna(dataset['Self_Employed'].mode()[0],inplace=True)

#numerical variable

dataset.LoanAmount = dataset.LoanAmount.fillna(dataset.LoanAmount.mean())
dataset.LoanAmount_log = dataset.LoanAmount_log.fillna(dataset.LoanAmount_log.mean())

#catagorical values
dataset['Loan_Amount_Term'].fillna(dataset['Loan_Amount_Term'].mode()[0],inplace=True)

#catagorical values
dataset['Credit_History'].fillna(dataset['Credit_History'].mode()[0],inplace=True)

dataset.isnull().sum()

#normalising applicant income and Coapplicant Income

dataset['TotalIncome']=dataset['ApplicantIncome']+dataset['CoapplicantIncome']
dataset['TotalIncome_log'] = np.log(dataset['TotalIncome'])

dataset['TotalIncome_log'].hist(bins=20)

dataset.head()

#devide dataset into dependent and independent variables

x=dataset.iloc[:,np.r_[1:5,9:11,13:15]].values
y=dataset.iloc[:,12].values

x

y

#split a dataset into train and test the dataset

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state = 0)

print(x_train)

#for this catagorical values into 0's and 1's 
from sklearn.preprocessing import LabelEncoder
labelencoder_x = LabelEncoder()

for i in range(0, 5):
  x_train[:,i]=labelencoder_x.fit_transform(x_train[:,i])

x_train[:,7]=labelencoder_x.fit_transform(x_train[:,7])

x_train

labelencoder_y=LabelEncoder()
y_train= labelencoder_y.fit_transform(y_train)

y_train

for i in range(0, 5):
  x_test[:,i]=labelencoder_x.fit_transform(x_test[:,i])

x_test[:,7]=labelencoder_x.fit_transform(x_test[:,7])

labelencoder_y=LabelEncoder()
y_test= labelencoder_y.fit_transform(y_test)

y_test

#scale dataset
from sklearn.preprocessing import StandardScaler
ss=StandardScaler()
x_train=ss.fit_transform(x_train)
x_test=ss.fit_transform(x_test)

#applying algorithm on dataset
#1st descision tree classifier
from sklearn.tree import DecisionTreeClassifier
DTClassifier= DecisionTreeClassifier(criterion='entropy', random_state=0)
DTClassifier.fit(x_train,y_train)

y_pred= DTClassifier.predict(x_test)
y_pred

from sklearn import metrics
print('The accuracy of descision tree is: ', metrics.accuracy_score(y_pred,y_test))

#accuracy is not so good
#applying NB algorithm

from sklearn.naive_bayes import GaussianNB
NBClassifier = GaussianNB()
NBClassifier.fit(x_train,y_train)

y_pred=NBClassifier.predict(x_test)

y_pred

print('The accuracy of Naive Bayes is: ', metrics.accuracy_score(y_pred,y_test))